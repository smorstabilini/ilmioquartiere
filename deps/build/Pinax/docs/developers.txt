====================================
 Developer Code Repository Workflow
====================================

There is a different "workflow" for developers with Commit privilege
and those without.  


Developers with Commit Privileges
=================================

[TBD]


Developers without Commit Privileges
====================================

Login to http://github.com and search for Pinax or go directly here::

    http://github.com/pinax/pinax/tree/master

Getting the code
----------------

Use the 'fork' button to fork the Pinax tree to your area. This
invokes a "Hardcore Forking Action".

Grab the "Your Clone" URL from the page, using the Flash button if you
have Flash. It gives you something like this::

    git@github.com:yourusername/pinax.git

Clone this to your computer: in the current pinax-boot installation,
cd to src/ and then::

    git clone git@github.com:yourusername/pinax.git

Push your changes back
----------------------

Do your development in src/pinax, test, later, rinse, repeat. When
you're satisfied with your changes, ``git commit`` them to your local
repository copy and send it back up to your fork on Github::

    git push

When you're ready for the committers to review your changes for
acceptance, go to your fork on Github (e.g.,
``http://github.com/yourusername/pinax/tree/master``) then hit the "pull
request" button to notify the committers.

Keep in sync with the main pinax master
---------------------------------------

Add a name for the pinax master git location::
    
    $ git remote add pinaxmaster git://github.com/pinax/pinax.git

This adds an entry to your existing local copy's .git/config like::
    
    [remote "pinaxmaster"]
        url = git://github.com/pinax/pinax.git
        fetch = +refs/heads/*:refs/remotes/pinaxmaster/*

Then pull from the master and merge changes in::

    $ git pull pinaxmaster master

You may see merge conflicts like::

    From git://github.com/pinax/pinax
    * branch            master     -> FETCH_HEAD
    Auto-merging docs/install.txt
    CONFLICT (content): Merge conflict in docs/install.txt
    Auto-merging requirements/external_apps.txt
    CONFLICT (content): Merge conflict in requirements/external_apps.txt
    Automatic merge failed; fix conflicts and then commit the result.

Now resolve the conflicts with your editor. You'll need to ``git add``
the files again before you can ``commit``, ``push`` and issue pull
requests like above.

